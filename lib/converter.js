/**
 * splunk-spl-to-elasticsearch-dsl - Convert Splunk SPL to Elasticsearch DSL with pegjs
 * @version v2.3.1
 * @author Anonymity94 <1176989591@qq.com>
 * @buildAt 2021-10-12T06:33:30.035Z
 */
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {
    module.exports = factory();
  } else {
    root.splToDslConverter = factory();
  }
})(this, function () {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },
      "class": function _class(expectation) {
        var escapedParts = "",
            i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
        }

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },
      any: function any(expectation) {
        return "any character";
      },
      end: function end(expectation) {
        return "end of input";
      },
      other: function other(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i,
          j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }

        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = {
      start: peg$parsestart
    },
        peg$startRuleFunction = peg$parsestart,
        peg$c0 = peg$otherExpectation("DslExpression"),
        peg$c1 = function peg$c1(searchDsl, tail) {
      var tailMap = {}; // 处理时间查询条件

      var timeDsl = {};
      var timeRange = {};
      tail.forEach(function (item) {
        if (item && item[3]) {
          if (item[3].hasOwnProperty('gentimes')) {
            timeRange = item[3].gentimes;
            timeDsl = {
              bool: {
                must: {
                  range: _defineProperty({}, timeRange.time_field, {
                    from: timeRange.time_from,
                    to: timeRange.time_to,
                    include_lower: true,
                    // 包含开始时间
                    include_upper: true // 包含结束时间

                  })
                }
              }
            };
          } else {
            tailMap = Object.assign(tailMap, item[3]);
          }
        }
      }); // 处理下时间范围，拼接到字段搜索条件里面

      var fullDsl = renderFullDsl(searchDsl, timeDsl); // 增加dev参数，添加一些方便外层拿到参数，比如时间，后续如果想做校验字段是否存在，可以在此基础上修改

      var result = {
        target: Object.assign({}, fullDsl, tailMap, {
          track_total_hits: true
        }),
        dev: {
          time_range: _objectSpread({}, timeRange),
          fields: fields
        }
      };
      return {
        result: json ? result : JSON.stringify(result)
      };
    },
        peg$c2 = peg$otherExpectation("SourceAndSearchExpression"),
        peg$c3 = function peg$c3(sourceArr, searchArr) {
      if (!searchArr || !searchArr[1] || searchArr.length === 0) {
        return {};
      }

      return searchArr[1];
    },
        peg$c4 = peg$otherExpectation("SearchExpression"),
        peg$c5 = function peg$c5(region) {
      return logicalExpressionTransform(region);
    },
        peg$c6 = peg$otherExpectation("RegionOr"),
        peg$c7 = function peg$c7(left, right) {
      return {
        connector: "OR",
        left: left,
        right: right
      };
    },
        peg$c8 = peg$otherExpectation("RegionAnd"),
        peg$c9 = function peg$c9(left, right) {
      return {
        connector: "AND",
        left: left,
        right: right
      };
    },
        peg$c10 = peg$otherExpectation("FactorBlock"),
        peg$c11 = function peg$c11(RegionOr) {
      return RegionOr;
    },
        peg$c12 = peg$otherExpectation("BasicCondition"),
        peg$c13 = function peg$c13(field, op, value) {
      // 如果操作符不是等于，并且存在 * 或者是 ?, 抛异常
      if (op !== '=' && (value.indexOf('*') > -1 || value.indexOf('?') > -1)) {
        throw Error('模糊查询时只能使用等于[=]。例如：name="abcd?e"');
      }

      if (op === '=') {
        // 存在 * 或者是 ? 时，走模糊查询
        if (value.indexOf('*') > -1 || value.indexOf('?') > -1) {
          if (value.charAt(0) === '?' || value.length === 1 && value === '*') {
            throw Error('避免使用*或开头模式?。这会增加查找匹配项所需的迭代次数，并降低搜索性能。'); // throw Error('Avoid beginning patterns with * or ?. This can increase the iterations needed to find matching terms and slow search performance.')
          }

          return {
            "wildcard": _defineProperty({}, field, {
              "value": value
            })
          };
        }

        return {
          term: _defineProperty({}, "".concat(field), {
            value: value,
            boost: 1.0
          })
        };
      }

      if (op === '!=') {
        return {
          bool: {
            must_not: [{
              term: _defineProperty({}, "".concat(field), {
                value: value,
                boost: 1.0
              })
            }]
          }
        };
      }

      var opText = '';

      if (op === '>') {
        opText = 'gt';
      }

      if (op === '>=') {
        opText = 'gte';
      }

      if (op === '<') {
        opText = 'lt';
      }

      if (op === '<=') {
        opText = 'lte';
      }

      if (opText) {
        return {
          range: _defineProperty({}, field, _defineProperty({}, opText, value))
        };
      }

      return {};
    },
        peg$c14 = peg$otherExpectation("LikeCondition"),
        peg$c15 = function peg$c15(field, value) {
      return {
        "wildcard": _defineProperty({}, field, {
          "value": value
        })
      };
    },
        peg$c16 = peg$otherExpectation("InCondition"),
        peg$c17 = function peg$c17(field, values) {
      var _terms;

      return {
        terms: (_terms = {}, _defineProperty(_terms, "".concat(field), values), _defineProperty(_terms, "boost", 1.0), _terms)
      };
    },
        peg$c18 = peg$otherExpectation("NotInCondition"),
        peg$c19 = function peg$c19(field, values) {
      var _terms2;

      return {
        bool: {
          must_not: [{
            terms: (_terms2 = {}, _defineProperty(_terms2, "".concat(field), values), _defineProperty(_terms2, "boost", 1.0), _terms2)
          }]
        }
      };
    },
        peg$c20 = peg$otherExpectation("ExistsCondition"),
        peg$c21 = function peg$c21(field) {
      return {
        bool: {
          must: [{
            exists: {
              field: field
            }
          }, {
            bool: {
              must_not: [{
                term: _defineProperty({}, "".concat(field, ".keyword"), {
                  value: "",
                  boost: 1
                })
              }, {
                term: _defineProperty({}, "".concat(field, ".keyword"), {
                  value: "-",
                  boost: 1
                })
              }]
            }
          }]
        }
      };
    },
        peg$c22 = peg$otherExpectation("NotExistsCondition"),
        peg$c23 = function peg$c23(field) {
      return {
        bool: {
          should: [{
            bool: {
              must_not: [{
                exists: {
                  field: field
                }
              }]
            }
          }, {
            bool: {
              must: [{
                term: _defineProperty({}, "".concat(field, ".keyword"), {
                  value: "",
                  boost: 1
                })
              }]
            }
          }, {
            bool: {
              must: [{
                term: _defineProperty({}, "".concat(field, ".keyword"), {
                  value: "-",
                  boost: 1
                })
              }]
            }
          }]
        }
      };
    },
        peg$c24 = peg$otherExpectation("MultipleValue"),
        peg$c25 = function peg$c25(first, rest) {
      var result = [first].concat(rest); // 数组去重一下

      return uniqueArray(result);
    },
        peg$c26 = peg$otherExpectation("MoreMultipleValues"),
        peg$c27 = ",",
        peg$c28 = peg$literalExpectation(",", false),
        peg$c29 = function peg$c29(value) {
      return value;
    },
        peg$c30 = function peg$c30(field, value) {
      if (value.charAt(0) === '?' || value.length === 1 && value === '*') {
        throw Error('避免使用*或开头模式?。这会增加查找匹配项所需的迭代次数，并降低搜索性能。'); // throw Error('Avoid beginning patterns with * or ?. This can increase the iterations needed to find matching terms and slow search performance.')
      }

      return {
        "wildcard": _defineProperty({}, field, {
          "value": value
        })
      };
    },
        peg$c31 = /^[a-zA-Z0-9._\-*?]/,
        peg$c32 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ".", "_", "-", "*", "?"], false, false),
        peg$c33 = "\"",
        peg$c34 = peg$literalExpectation("\"", false),
        peg$c35 = function peg$c35(_char) {
      return _char;
    },
        peg$c36 = "'",
        peg$c37 = peg$literalExpectation("'", false),
        peg$c38 = peg$otherExpectation("TailCommand"),
        peg$c39 = peg$otherExpectation("FieldsCommand"),
        peg$c40 = function peg$c40(first, rest) {
      var fieldsArr = [first].concat(rest); // +的放在includes，-放在excludes

      var includes = [];
      var excludes = [];
      fieldsArr.forEach(function (_ref) {
        var op = _ref.op,
            field = _ref.field;

        if (op === '+') {
          includes.push(field);
        }

        if (op === '-') {
          excludes.push(field);
        }
      });
      return {
        _source: {
          includes: includes,
          excludes: excludes
        }
      };
    },
        peg$c41 = peg$otherExpectation("SourceField"),
        peg$c42 = function peg$c42(op, field) {
      return {
        op: op || '+',
        field: field
      };
    },
        peg$c43 = peg$otherExpectation("MoreSourceFields"),
        peg$c44 = function peg$c44(field) {
      return field;
    },
        peg$c45 = peg$otherExpectation("TopCommand"),
        peg$c46 = "limit=",
        peg$c47 = peg$literalExpectation("limit=", false),
        peg$c48 = function peg$c48(number, field) {
      // TODO:
      return {};
    },
        peg$c49 = peg$otherExpectation("HeadCommand"),
        peg$c50 = function peg$c50(number) {
      if (number <= 0) {
        throw Error('返回结果的数量至少为1');
      } // 是否需要限制最大查询上限为1w？


      return {
        from: 0,
        size: number
      };
    },
        peg$c51 = peg$otherExpectation("SortCommand"),
        peg$c52 = function peg$c52(op, first, rest) {
      // +ip/ip ==> {ip: {order: 'asc'}}
      // -ip ==> {ip: {order: 'desc'}}
      var sortsArr = [[op, first]].concat(rest); // [[操作符, 字段], [操作符, 字段]]

      var sortDsl = {};

      if (sortsArr.length > 0) {
        var r = [];
        sortsArr.forEach(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
              op = _ref3[0],
              field = _ref3[1];

          r.push(_defineProperty({}, field, {
            order: !op || op === PLUS ? 'asc' : 'desc'
          }));
        });
        sortDsl.sort = r;
      }

      return sortDsl;
    },
        peg$c53 = peg$otherExpectation("MoreSort"),
        peg$c54 = function peg$c54(op, field) {
      return [op, field];
    },
        peg$c55 = peg$otherExpectation("GentimesCommand"),
        peg$c56 = "start",
        peg$c57 = peg$literalExpectation("start", true),
        peg$c58 = "end",
        peg$c59 = peg$literalExpectation("end", true),
        peg$c60 = function peg$c60(field, startTime, endTimeArr) {
      var endTime = 'now';

      if (endTimeArr.length > 0) {
        endTime = endTimeArr[0][5];
      }

      return {
        gentimes: {
          time_field: field,
          time_from: startTime,
          time_to: endTime
        }
      };
    },
        peg$c61 = peg$otherExpectation("TimeValue"),
        peg$c62 = peg$otherExpectation("RelativeTime"),
        peg$c63 = "now-",
        peg$c64 = peg$literalExpectation("now-", false),
        peg$c65 = function peg$c65(number, timeUnit) {
      return text();
    },
        peg$c66 = peg$otherExpectation("now"),
        peg$c67 = "now",
        peg$c68 = peg$literalExpectation("now", false),
        peg$c69 = function peg$c69() {
      return text();
    },
        peg$c70 = peg$otherExpectation("TimeUnit"),
        peg$c71 = "y",
        peg$c72 = peg$literalExpectation("y", false),
        peg$c73 = "M",
        peg$c74 = peg$literalExpectation("M", false),
        peg$c75 = "w",
        peg$c76 = peg$literalExpectation("w", false),
        peg$c77 = "d",
        peg$c78 = peg$literalExpectation("d", false),
        peg$c79 = "h",
        peg$c80 = peg$literalExpectation("h", false),
        peg$c81 = "H",
        peg$c82 = peg$literalExpectation("H", false),
        peg$c83 = "m",
        peg$c84 = peg$literalExpectation("m", false),
        peg$c85 = "s",
        peg$c86 = peg$literalExpectation("s", false),
        peg$c87 = function peg$c87() {
      return text();
    },
        peg$c88 = peg$otherExpectation("AbsoluteTime"),
        peg$c89 = peg$otherExpectation("Timestamp"),
        peg$c90 = function peg$c90(timestamp) {
      if (String(timestamp).length !== 13) {
        throw Error('请输入毫秒级的时间戳'); // throw Error('Please enter a timestamp in milliseconds')
      }

      return timestamp;
    },
        peg$c91 = peg$otherExpectation("UTCTime"),
        peg$c92 = "-",
        peg$c93 = peg$literalExpectation("-", false),
        peg$c94 = "T",
        peg$c95 = peg$literalExpectation("T", false),
        peg$c96 = ":",
        peg$c97 = peg$literalExpectation(":", false),
        peg$c98 = function peg$c98(year, month, day, hours, minutes, seconds, timeZone) {
      if (timeZone) {
        var _timeZone = _slicedToArray(timeZone, 3),
            op = _timeZone[0],
            timeZoneString = _timeZone[1],
            suffix = _timeZone[2]; // 判断时区范围


        var timeZoneNumber = parseInt(timeZoneString);

        if (timeZoneNumber > 12 || timeZoneNumber < -12) {
          throw Error('错误的时区范围'); // throw Error('Wrong time zone range')
        }

        if (suffix && suffix.length < 2 || suffix && suffix.length === 2 && (suffix[0] !== '0' || suffix[1] !== '0') || timeZoneNumber < 10 && (timeZoneString.charAt(0) !== '0' || timeZoneString.charAt(0) === '0' && timeZoneString.length !== 2)) {
          throw Error("\u65F6\u533A\u683C\u5F0F\u9519\u8BEF. \u672A\u80FD\u89E3\u6790\u65E5\u671F\u5B57\u6BB5 [".concat(text(), "], \u8BF7\u8F93\u5165 [").concat(op, "0").concat(timeZoneNumber, "] \u6216 [").concat(op, "0").concat(timeZoneNumber, ":00]")); // throw Error(`Bad time zone format. failed to parse date field [${text()}], please enter [${op}0${timeZoneNumber}] or [${op}0${timeZoneNumber}:00]`)
        }

        return text();
      } else {
        // 拼接时区信息
        return "".concat(text(), "+08:00");
      }
    },
        peg$c99 = peg$otherExpectation("TimeZone"),
        peg$c100 = "+",
        peg$c101 = peg$literalExpectation("+", false),
        peg$c102 = /^[0-9]/,
        peg$c103 = peg$classExpectation([["0", "9"]], false, false),
        peg$c104 = "00",
        peg$c105 = peg$literalExpectation("00", false),
        peg$c106 = ":00",
        peg$c107 = peg$literalExpectation(":00", false),
        peg$c108 = function peg$c108(op, numberArr, suffix) {
      var numberstring = numberArr.join('');
      suffix = suffix || numberstring.slice(2, 4);
      return [op, numberstring.slice(0, 2), suffix];
    },
        peg$c109 = peg$otherExpectation("SizeCommand"),
        peg$c110 = function peg$c110(number) {
      return {
        size: number
      };
    },
        peg$c111 = peg$otherExpectation("TimeoutCommand"),
        peg$c112 = "ms",
        peg$c113 = peg$literalExpectation("ms", false),
        peg$c114 = function peg$c114(time, unit) {
      return {
        timeout: "".concat(time).concat(unit)
      };
    },
        peg$c115 = peg$otherExpectation("TrackTotalCommand"),
        peg$c116 = function peg$c116(bool) {
      return {
        track_total_hits: bool
      };
    },
        peg$c117 = peg$otherExpectation("TerminateAfterCommand"),
        peg$c118 = function peg$c118(number) {
      return {
        terminate_after: number
      };
    },
        peg$c119 = /^[ \t\r\n]/,
        peg$c120 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false),
        peg$c121 = /^[ ]/,
        peg$c122 = peg$classExpectation([" "], false, false),
        peg$c123 = peg$otherExpectation("DataSource"),
        peg$c124 = /^[a-zA-Z0-9._\-*]/,
        peg$c125 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ".", "_", "-", "*"], false, false),
        peg$c126 = peg$otherExpectation("Field"),
        peg$c127 = /^[A-Za-z0-9_.]/,
        peg$c128 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_", "."], false, false),
        peg$c129 = function peg$c129(str) {
      var field = str.join(''); // TODO: 排除命令
      // 这里为什么会识别到命令前缀呢？

      if (fields.indexOf(field) === -1 && ["fields", "FIELDS", "sort", "SORT", "gentimes", "GENTIMES", "head", "HEAD", "timeout", "TIMEOUT", "track_total_hits", "TRACK_TOTAL_HITS", "terminate_after", "TERMINATE_AFTER"].indexOf(field) === -1) {
        fields.push(field);
      }

      return field;
    },
        peg$c130 = peg$otherExpectation("Value"),
        peg$c131 = /^[\u4E00-\u9FA5_a-zA-Z0-9.\-?*:\/<>]/,
        peg$c132 = peg$classExpectation([["\u4E00", "\u9FA5"], "_", ["a", "z"], ["A", "Z"], ["0", "9"], ".", "-", "?", "*", ":", "/", "<", ">"], false, false),
        peg$c133 = peg$otherExpectation("QuotedValue"),
        peg$c134 = /^[\u4E00-\u9FA5_a-zA-Z0-9.\-?*:\/<> ]/,
        peg$c135 = peg$classExpectation([["\u4E00", "\u9FA5"], "_", ["a", "z"], ["A", "Z"], ["0", "9"], ".", "-", "?", "*", ":", "/", "<", ">", " "], false, false),
        peg$c136 = "",
        peg$c137 = function peg$c137(num) {
      return parseInt(num.join(''));
    },
        peg$c138 = "and",
        peg$c139 = peg$literalExpectation("AND", true),
        peg$c140 = "&&",
        peg$c141 = peg$literalExpectation("&&", false),
        peg$c142 = function peg$c142() {
      return AND;
    },
        peg$c143 = "or",
        peg$c144 = peg$literalExpectation("OR", true),
        peg$c145 = "||",
        peg$c146 = peg$literalExpectation("||", false),
        peg$c147 = function peg$c147() {
      return OR;
    },
        peg$c148 = "true",
        peg$c149 = peg$literalExpectation("true", false),
        peg$c150 = function peg$c150() {
      return true;
    },
        peg$c151 = "false",
        peg$c152 = peg$literalExpectation("false", false),
        peg$c153 = function peg$c153() {
      return false;
    },
        peg$c154 = "|",
        peg$c155 = peg$literalExpectation("|", false),
        peg$c156 = "=",
        peg$c157 = peg$literalExpectation("=", false),
        peg$c158 = "!=",
        peg$c159 = peg$literalExpectation("!=", false),
        peg$c160 = ">=",
        peg$c161 = peg$literalExpectation(">=", false),
        peg$c162 = ">",
        peg$c163 = peg$literalExpectation(">", false),
        peg$c164 = "<=",
        peg$c165 = peg$literalExpectation("<=", false),
        peg$c166 = "<",
        peg$c167 = peg$literalExpectation("<", false),
        peg$c168 = "(",
        peg$c169 = peg$literalExpectation("(", false),
        peg$c170 = ")",
        peg$c171 = peg$literalExpectation(")", false),
        peg$c172 = "source",
        peg$c173 = peg$literalExpectation("SOURCE", true),
        peg$c174 = "search",
        peg$c175 = peg$literalExpectation("SEARCH", true),
        peg$c176 = "fields",
        peg$c177 = peg$literalExpectation("FIELDS", true),
        peg$c178 = "head",
        peg$c179 = peg$literalExpectation("HEAD", true),
        peg$c180 = "sort",
        peg$c181 = peg$literalExpectation("SORT", true),
        peg$c182 = "gentimes",
        peg$c183 = peg$literalExpectation("GENTIMES", true),
        peg$c184 = "size",
        peg$c185 = peg$literalExpectation("SIZE", true),
        peg$c186 = "timeout",
        peg$c187 = peg$literalExpectation("TIMEOUT", true),
        peg$c188 = "track_total_hits",
        peg$c189 = peg$literalExpectation("TRACK_TOTAL_HITS", true),
        peg$c190 = "terminate_after",
        peg$c191 = peg$literalExpectation("TERMINATE_AFTER", true),
        peg$c192 = "top",
        peg$c193 = peg$literalExpectation("TOP", true),
        peg$c194 = "limit",
        peg$c195 = peg$literalExpectation("LIMIT", true),
        peg$c196 = "in",
        peg$c197 = peg$literalExpectation("IN", true),
        peg$c198 = "not in",
        peg$c199 = peg$literalExpectation("NOT IN", true),
        peg$c200 = "like",
        peg$c201 = peg$literalExpectation("LIKE", true),
        peg$c202 = "exists",
        peg$c203 = peg$literalExpectation("EXISTS", true),
        peg$c204 = "not_exists",
        peg$c205 = peg$literalExpectation("NOT_EXISTS", true),
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{
      line: 1,
      column: 1
    }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return {
        type: "literal",
        text: text,
        ignoreCase: ignoreCase
      };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: "class",
        parts: parts,
        inverted: inverted,
        ignoreCase: ignoreCase
      };
    }

    function peg$anyExpectation() {
      return {
        type: "any"
      };
    }

    function peg$endExpectation() {
      return {
        type: "end"
      };
    }

    function peg$otherExpectation(description) {
      return {
        type: "other",
        description: description
      };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p;

      if (details) {
        return details;
      } else {
        p = pos - 1;

        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);
      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parsestart() {
      var s0;
      s0 = peg$parseDslExpression();
      return s0;
    }

    function peg$parseDslExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseSourceAndSearchExpression();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();

        if (s4 === peg$FAILED) {
          s4 = null;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parsedivider();

          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();

            if (s6 === peg$FAILED) {
              s6 = null;
            }

            if (s6 !== peg$FAILED) {
              s7 = peg$parseTailCommand();

              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();

          if (s4 === peg$FAILED) {
            s4 = null;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parsedivider();

            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();

              if (s6 === peg$FAILED) {
                s6 = null;
              }

              if (s6 !== peg$FAILED) {
                s7 = peg$parseTailCommand();

                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c0);
        }
      }

      return s0;
    }

    function peg$parseSourceAndSearchExpression() {
      var s0, s1, s2, s3, s4, s5, s6;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseSOURCE();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();

        if (s3 !== peg$FAILED) {
          s4 = peg$parseequal();

          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();

            if (s5 !== peg$FAILED) {
              s6 = peg$parseDataSource();

              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();

        if (s3 !== peg$FAILED) {
          s4 = peg$parseSearchExpression();

          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c2);
        }
      }

      return s0;
    }

    function peg$parseSearchExpression() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsedivider();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();

        if (s3 !== peg$FAILED) {
          s4 = peg$parseSEARCH();

          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();

            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseRegionOr();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c4);
        }
      }

      return s0;
    }

    function peg$parseRegionOr() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseRegionAnd();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWhitespace();

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWhitespace();
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseOrExpression();

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWhitespace();

            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWhitespace();
              }
            } else {
              s4 = peg$FAILED;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseRegionOr();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parseRegionAnd();
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c6);
        }
      }

      return s0;
    }

    function peg$parseRegionAnd() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseFactorBlock();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWhitespace();

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWhitespace();
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseAndExpression();

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWhitespace();

            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWhitespace();
              }
            } else {
              s4 = peg$FAILED;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseRegionAnd();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c9(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parseFactorBlock();
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c8);
        }
      }

      return s0;
    }

    function peg$parseFactorBlock() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$parseBasicCondition();

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseparenStart();

        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseWhitespace();

          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseWhitespace();
          }

          if (s2 !== peg$FAILED) {
            s3 = peg$parseRegionOr();

            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseWhitespace();

              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWhitespace();
              }

              if (s4 !== peg$FAILED) {
                s5 = peg$parseparenEnd();

                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c11(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }

      return s0;
    }

    function peg$parseBasicCondition() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseField();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseequal();

          if (s3 === peg$FAILED) {
            s3 = peg$parsenotEqual();

            if (s3 === peg$FAILED) {
              s3 = peg$parsegte();

              if (s3 === peg$FAILED) {
                s3 = peg$parsegt();

                if (s3 === peg$FAILED) {
                  s3 = peg$parselte();

                  if (s3 === peg$FAILED) {
                    s3 = peg$parselt();
                  }
                }
              }
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c13(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parseLikeCondition();

        if (s0 === peg$FAILED) {
          s0 = peg$parseInCondition();

          if (s0 === peg$FAILED) {
            s0 = peg$parseNotInCondition();

            if (s0 === peg$FAILED) {
              s0 = peg$parseExistsCondition();

              if (s0 === peg$FAILED) {
                s0 = peg$parseNotExistsCondition();
              }
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c12);
        }
      }

      return s0;
    }

    function peg$parseLikeCondition() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseField();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseLIKE();

          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c14);
        }
      }

      return s0;
    }

    function peg$parseInCondition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseField();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseIN();

          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseparenStart();

              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseMultipleValue();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseparenEnd();

                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c17(s1, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
        }
      }

      return s0;
    }

    function peg$parseNotInCondition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseField();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseNOT_IN();

          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseparenStart();

              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseMultipleValue();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseparenEnd();

                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c19(s1, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c18);
        }
      }

      return s0;
    }

    function peg$parseExistsCondition() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseField();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseEXISTS();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c20);
        }
      }

      return s0;
    }

    function peg$parseNotExistsCondition() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseField();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseNOT_EXISTS();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c23(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }

      return s0;
    }

    function peg$parseMultipleValue() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseValue();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseMoreMultipleValues();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseMoreMultipleValues();
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c24);
        }
      }

      return s0;
    }

    function peg$parseMoreMultipleValues() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c27;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c28);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseValue();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c29(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c26);
        }
      }

      return s0;
    }

    function peg$parseWildcardCondition() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;
      s1 = peg$parseField();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseequal();

          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseWildcardValue();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWildcardValue() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c31.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c32);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c31.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c32);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c33;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c34);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseWildcardValue();

          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c33;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c34);
              }
            }

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c35(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;

          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c36;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c37);
            }
          }

          if (s1 !== peg$FAILED) {
            s2 = peg$parseWildcardValue();

            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c36;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c37);
                }
              }

              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseTailCommand() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$parseFieldsCommand();

      if (s0 === peg$FAILED) {
        s0 = peg$parseHeadCommand();

        if (s0 === peg$FAILED) {
          s0 = peg$parseSortCommand();

          if (s0 === peg$FAILED) {
            s0 = peg$parseGentimesCommand();
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c38);
        }
      }

      return s0;
    }

    function peg$parseFieldsCommand() {
      var s0, s1, s2, s3, s4, s5, s6;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseFIELDS();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseSourceField();

            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseMoreSourceFields();

              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseMoreSourceFields();
              }

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c40(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c39);
        }
      }

      return s0;
    }

    function peg$parseSourceField() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse_();

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseplus();

        if (s2 === peg$FAILED) {
          s2 = peg$parseminus();
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parseField();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c42(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c41);
        }
      }

      return s0;
    }

    function peg$parseMoreSourceFields() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c27;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c28);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseSourceField();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c44(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c43);
        }
      }

      return s0;
    }

    function peg$parseTopCommand() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseTOP();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c46) {
              s4 = peg$c46;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c47);
              }
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();

              if (s5 !== peg$FAILED) {
                s6 = peg$parseInteger();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseField();

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c48(s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c45);
        }
      }

      return s0;
    }

    function peg$parseHeadCommand() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEAD();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseInteger();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c50(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c49);
        }
      }

      return s0;
    }

    function peg$parseSortCommand() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSORT();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseplus();

            if (s4 === peg$FAILED) {
              s4 = peg$parseminus();
            }

            if (s4 === peg$FAILED) {
              s4 = null;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseField();

              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseMoreSort();

                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseMoreSort();
                }

                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c52(s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c51);
        }
      }

      return s0;
    }

    function peg$parseMoreSort() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c27;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c28);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseplus();

            if (s4 === peg$FAILED) {
              s4 = peg$parseminus();
            }

            if (s4 === peg$FAILED) {
              s4 = null;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseField();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c54(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c53);
        }
      }

      return s0;
    }

    function peg$parseGentimesCommand() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseGENTIMES();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseField();

            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();

              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c56) {
                  s6 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s6 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c57);
                  }
                }

                if (s6 !== peg$FAILED) {
                  s7 = peg$parse__();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseequal();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse__();

                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseTimeValue();

                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$currPos;
                          s13 = peg$parse_();

                          if (s13 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c58) {
                              s14 = input.substr(peg$currPos, 3);
                              peg$currPos += 3;
                            } else {
                              s14 = peg$FAILED;

                              if (peg$silentFails === 0) {
                                peg$fail(peg$c59);
                              }
                            }

                            if (s14 !== peg$FAILED) {
                              s15 = peg$parse__();

                              if (s15 !== peg$FAILED) {
                                s16 = peg$parseequal();

                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parse__();

                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$parseTimeValue();

                                    if (s18 !== peg$FAILED) {
                                      s19 = peg$parse__();

                                      if (s19 !== peg$FAILED) {
                                        s13 = [s13, s14, s15, s16, s17, s18, s19];
                                        s12 = s13;
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }

                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$currPos;
                            s13 = peg$parse_();

                            if (s13 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c58) {
                                s14 = input.substr(peg$currPos, 3);
                                peg$currPos += 3;
                              } else {
                                s14 = peg$FAILED;

                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c59);
                                }
                              }

                              if (s14 !== peg$FAILED) {
                                s15 = peg$parse__();

                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parseequal();

                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parse__();

                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseTimeValue();

                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$parse__();

                                        if (s19 !== peg$FAILED) {
                                          s13 = [s13, s14, s15, s16, s17, s18, s19];
                                          s12 = s13;
                                        } else {
                                          peg$currPos = s12;
                                          s12 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          }

                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c60(s4, s10, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c55);
        }
      }

      return s0;
    }

    function peg$parseTimeValue() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$parseRelativeTime();

      if (s0 === peg$FAILED) {
        s0 = peg$parseUTCTime();

        if (s0 === peg$FAILED) {
          s0 = peg$parseTimestamp();

          if (s0 === peg$FAILED) {
            s0 = peg$parseTimeNow();

            if (s0 === peg$FAILED) {
              s0 = peg$currPos;

              if (input.charCodeAt(peg$currPos) === 34) {
                s1 = peg$c33;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c34);
                }
              }

              if (s1 !== peg$FAILED) {
                s2 = peg$parseTimeValue();

                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s3 = peg$c33;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c34);
                    }
                  }

                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c35(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }

              if (s0 === peg$FAILED) {
                s0 = peg$currPos;

                if (input.charCodeAt(peg$currPos) === 39) {
                  s1 = peg$c36;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c37);
                  }
                }

                if (s1 !== peg$FAILED) {
                  s2 = peg$parseTimeValue();

                  if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s3 = peg$c36;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c37);
                      }
                    }

                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c35(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c61);
        }
      }

      return s0;
    }

    function peg$parseRelativeTime() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c63) {
        s1 = peg$c63;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c64);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseInteger();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseTimeUnit();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c65(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c62);
        }
      }

      return s0;
    }

    function peg$parseTimeNow() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c67) {
        s1 = peg$c67;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c68);
        }
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c69();
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c66);
        }
      }

      return s0;
    }

    function peg$parseTimeUnit() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 121) {
        s1 = peg$c71;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c72);
        }
      }

      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 77) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 119) {
            s1 = peg$c75;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c76);
            }
          }

          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 100) {
              s1 = peg$c77;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c78);
              }
            }

            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 104) {
                s1 = peg$c79;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c80);
                }
              }

              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 72) {
                  s1 = peg$c81;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c82);
                  }
                }

                if (s1 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 109) {
                    s1 = peg$c83;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c84);
                    }
                  }

                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 115) {
                      s1 = peg$c85;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c86);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c87();
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c70);
        }
      }

      return s0;
    }

    function peg$parseAbsoluteTime() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$parseTimestamp();

      if (s0 === peg$FAILED) {
        s0 = peg$parseUTCTime();
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c88);
        }
      }

      return s0;
    }

    function peg$parseTimestamp() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseInteger();

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c90(s1);
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c89);
        }
      }

      return s0;
    }

    function peg$parseUTCTime() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseInteger();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c92;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c93);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseInteger();

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c92;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c93);
              }
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseInteger();

              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 84) {
                  s6 = peg$c94;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c95);
                  }
                }

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseInteger();

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s8 = peg$c96;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c97);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseInteger();

                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s10 = peg$c96;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;

                          if (peg$silentFails === 0) {
                            peg$fail(peg$c97);
                          }
                        }

                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseInteger();

                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseTimeZone();

                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c98(s1, s3, s5, s7, s9, s11, s12);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c91);
        }
      }

      return s0;
    }

    function peg$parseTimeZone() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c101);
        }
      }

      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c92;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c93);
          }
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];

        if (peg$c102.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c103);
          }
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);

            if (peg$c102.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c103);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c104) {
            s3 = peg$c104;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c105);
            }
          }

          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c106) {
              s3 = peg$c106;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c107);
              }
            }
          }

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c108(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c99);
        }
      }

      return s0;
    }

    function peg$parseSizeCommand() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIZE();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseInteger();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c110(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c109);
        }
      }

      return s0;
    }

    function peg$parseTimeoutCommand() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseTIMEOUT();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseInteger();

            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 115) {
                s5 = peg$c85;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c86);
                }
              }

              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c112) {
                  s5 = peg$c112;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c113);
                  }
                }
              }

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c114(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c111);
        }
      }

      return s0;
    }

    function peg$parseTrackTotalCommand() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseTRACK_TOTAL_HITS();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseBoolean();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c115);
        }
      }

      return s0;
    }

    function peg$parseTerminateAfterCommand() {
      var s0, s1, s2, s3, s4;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINATE_AFTER();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            s4 = peg$parseInteger();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c118(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c117);
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;
      s0 = [];

      if (peg$c119.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c120);
        }
      }

      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);

          if (peg$c119.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c120);
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;
      s0 = [];

      if (peg$c119.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c120);
        }
      }

      while (s1 !== peg$FAILED) {
        s0.push(s1);

        if (peg$c119.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c120);
          }
        }
      }

      return s0;
    }

    function peg$parseWhitespace() {
      var s0;

      if (peg$c121.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c122);
        }
      }

      return s0;
    }

    function peg$parseDataSource() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c124.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c125);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c124.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c125);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c123);
        }
      }

      return s0;
    }

    function peg$parseField() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c127.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c128);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c127.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c128);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c129(s1);
      }

      s0 = s1;
      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c126);
        }
      }

      return s0;
    }

    function peg$parseValue() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c131.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c132);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c131.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c132);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c33;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c34);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseQuotedValue();

          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c33;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c34);
              }
            }

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c35(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;

          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c36;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c37);
            }
          }

          if (s1 !== peg$FAILED) {
            s2 = peg$parseQuotedValue();

            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c36;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c37);
                }
              }

              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c130);
        }
      }

      return s0;
    }

    function peg$parseQuotedValue() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c134.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c135);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c134.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c135);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$c136;

        if (s0 === peg$FAILED) {
          s0 = peg$c136;
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c133);
        }
      }

      return s0;
    }

    function peg$parseInteger() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = [];

      if (peg$c102.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c103);
        }
      }

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);

          if (peg$c102.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c103);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c137(s1);
      }

      s0 = s1;
      return s0;
    }

    function peg$parseAndExpression() {
      var s0, s1;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c138) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c139);
        }
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.substr(peg$currPos, 2) === peg$c140) {
          s1 = peg$c140;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c141);
          }
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c142();
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parseOrExpression() {
      var s0, s1;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c143) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c144);
        }
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.substr(peg$currPos, 2) === peg$c145) {
          s1 = peg$c145;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c146);
          }
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c147();
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parseBoolean() {
      var s0, s1;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c148) {
        s1 = peg$c148;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c149);
        }
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150();
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.substr(peg$currPos, 5) === peg$c151) {
          s1 = peg$c151;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c152);
          }
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c153();
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parsedivider() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 124) {
        s0 = peg$c154;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c155);
        }
      }

      return s0;
    }

    function peg$parseequal() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c156;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c157);
        }
      }

      return s0;
    }

    function peg$parsenotEqual() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c158) {
        s0 = peg$c158;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }

      return s0;
    }

    function peg$parsegte() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c160) {
        s0 = peg$c160;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c161);
        }
      }

      return s0;
    }

    function peg$parsegt() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 62) {
        s0 = peg$c162;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c163);
        }
      }

      return s0;
    }

    function peg$parselte() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c164) {
        s0 = peg$c164;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c165);
        }
      }

      return s0;
    }

    function peg$parselt() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 60) {
        s0 = peg$c166;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c167);
        }
      }

      return s0;
    }

    function peg$parseplus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c100;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c101);
        }
      }

      return s0;
    }

    function peg$parseminus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c92;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c93);
        }
      }

      return s0;
    }

    function peg$parseparenStart() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c168;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c169);
        }
      }

      return s0;
    }

    function peg$parseparenEnd() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c170;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c171);
        }
      }

      return s0;
    }

    function peg$parseSOURCE() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c172) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c173);
        }
      }

      return s0;
    }

    function peg$parseSEARCH() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c174) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c175);
        }
      }

      return s0;
    }

    function peg$parseFIELDS() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c176) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c177);
        }
      }

      return s0;
    }

    function peg$parseHEAD() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c178) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c179);
        }
      }

      return s0;
    }

    function peg$parseSORT() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c180) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c181);
        }
      }

      return s0;
    }

    function peg$parseGENTIMES() {
      var s0;

      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c182) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c183);
        }
      }

      return s0;
    }

    function peg$parseSIZE() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c184) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c185);
        }
      }

      return s0;
    }

    function peg$parseTIMEOUT() {
      var s0;

      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c186) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c187);
        }
      }

      return s0;
    }

    function peg$parseTRACK_TOTAL_HITS() {
      var s0;

      if (input.substr(peg$currPos, 16).toLowerCase() === peg$c188) {
        s0 = input.substr(peg$currPos, 16);
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c189);
        }
      }

      return s0;
    }

    function peg$parseTERMINATE_AFTER() {
      var s0;

      if (input.substr(peg$currPos, 15).toLowerCase() === peg$c190) {
        s0 = input.substr(peg$currPos, 15);
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c191);
        }
      }

      return s0;
    }

    function peg$parseTOP() {
      var s0;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c192) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c193);
        }
      }

      return s0;
    }

    function peg$parseLIMIT() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c194) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c195);
        }
      }

      return s0;
    }

    function peg$parseIN() {
      var s0;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c196) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c197);
        }
      }

      return s0;
    }

    function peg$parseNOT_IN() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c198) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c199);
        }
      }

      return s0;
    }

    function peg$parseLIKE() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c200) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c201);
        }
      }

      return s0;
    }

    function peg$parseEXISTS() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c202) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c203);
        }
      }

      return s0;
    }

    function peg$parseNOT_EXISTS() {
      var s0;

      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c204) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c205);
        }
      }

      return s0;
    }

    var EQUAL = '=';
    var NOT_EQUAL = '!=';
    var AND = 'AND';
    var OR = 'OR';
    var PLUS = '+';
    var fields = []; // 结果是否需要变成json

    var _options = options,
        _options$json = _options.json,
        json = _options$json === void 0 ? false : _options$json;
    /**
    * 数组去重
    */

    function uniqueArray(array) {
      // return arr.reduce(
      //   (prev, cur) => (prev.includes(cur) ? prev : [...prev, cur]),
      //   []
      // );
      // java调用，无法使用ES6语法
      return array.filter(function (item, index, array) {
        return array.indexOf(item) === index;
      });
    }
    /**
    * 转换逻辑表达式
    */


    function logicalExpressionTransform() {
      var region = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var left = region.left,
          connector = region.connector,
          right = region.right;
      var esConnector = "";

      if (connector === AND) {
        esConnector = "must";
      }

      if (connector === OR) {
        esConnector = "should";
      }

      if (esConnector) {
        var _bool;

        return {
          bool: (_bool = {}, _defineProperty(_bool, esConnector, [logicalExpressionTransform(left), logicalExpressionTransform(right)]), _defineProperty(_bool, "adjust_pure_negative", true), _defineProperty(_bool, "boost", 1.0), _bool)
        };
      }

      return region;
    }
    /**
    * 判断对象是否为空
    */


    function objectIsEmpty(obj) {
      if (!obj) return true;
      if (Object.keys(obj).length === 0) return true;
      return false;
    }
    /**
    * 组合查询条件语句
    * @param {Object} searchDsl 字段的搜索条件
    * @param {Object} timeQuery 时间搜索条件
    */


    function renderFullDsl(searchDsl, timeQuery) {
      var isFieldQueryEmpty = objectIsEmpty(searchDsl);
      var isTimeQueryEmpty = objectIsEmpty(timeQuery);

      if (isFieldQueryEmpty && isTimeQueryEmpty) {
        return {
          query: {
            match_all: {}
          }
        };
      }

      if (!isFieldQueryEmpty && isTimeQueryEmpty) {
        return {
          query: {
            bool: {
              filter: [searchDsl],
              adjust_pure_negative: true,
              boost: 1.0
            }
          }
        };
      }

      if (isFieldQueryEmpty && !isTimeQueryEmpty) {
        return {
          query: {
            bool: {
              filter: [timeQuery],
              adjust_pure_negative: true,
              boost: 1.0
            }
          }
        };
      }

      return {
        query: {
          bool: {
            filter: [{
              bool: {
                must: [searchDsl, timeQuery]
              }
            }],
            adjust_pure_negative: true,
            boost: 1.0
          }
        }
      };
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
});